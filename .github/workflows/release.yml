name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Node.js dependencies
      run: npm install
      
    - name: Build TypeScript package  
      run: npm run build
      
    - name: Verify build output
      run: |
        echo "Checking dist directory..."
        ls -la dist/
        echo "Checking package.json..."
        cat package.json | grep '"name"\|"version"'
        
    - name: Check npm authentication
      run: npm whoami
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Dry run npm publish
      run: npm publish --dry-run --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Install Python build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build Python package
      run: |
        cd python-bridge
        python -m build
        ls -la dist/
        
    - name: Publish to PyPI
      run: |
        cd python-bridge
        python -m twine upload dist/* --skip-existing --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: CastPlan MCP ${{ github.ref_name }}
        body: |
          ## üöÄ CastPlan MCP ${{ github.ref_name }}
          
          Universal AI coding assistant memory and project awareness.
          
          ### üì¶ Quick Install
          
          **üî• Instant setup (uv/uvx):**
          ```bash
          uvx castplan-automation init
          ```
          
          **üì¶ npm:**
          ```bash  
          npm install -g @castplan/automation-mcp
          castplan-mcp init
          ```
          
          **üêç pip:**
          ```bash
          pip install castplan-automation
          castplan-mcp init
          ```
          
          ### ‚ú® What's New
          - Universal MCP compatibility (Claude, Cursor, VS Code, etc.)
          - Zero-config auto-detection and setup
          - Cross-platform support (Windows, macOS, Linux)  
          - Project-aware AI assistance
          
          ### üîó Links
          - [npm Package](https://www.npmjs.com/package/@castplan/automation-mcp)
          - [PyPI Package](https://pypi.org/project/castplan-automation/)
          - [Documentation](https://github.com/Ghostseller/CastPlan_mcp#readme)
          
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}