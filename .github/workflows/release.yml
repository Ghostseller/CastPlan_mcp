name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v2.0.0)'
        required: true
        default: 'v2.0.0'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Build TypeScript package
      run: npm run build
      
    - name: Run tests
      run: npm test
      
    - name: Install Python build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build Python package
      run: |
        cd python-bridge
        python -m build
        
    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Publish to PyPI
      run: |
        cd python-bridge
        python -m twine upload dist/* --skip-existing
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        release_name: CastPlan MCP ${{ github.ref_name || github.event.inputs.version }}
        body: |
          ## ðŸš€ CastPlan MCP ${{ github.ref_name || github.event.inputs.version }}
          
          Universal MCP Server for AI coding assistants.
          
          ### ðŸ“¦ Installation Options
          
          **npm (Node.js):**
          ```bash
          npm install -g @castplan/automation-mcp
          castplan-mcp init
          ```
          
          **uv/uvx (Python):**
          ```bash
          uvx castplan-automation init
          # OR
          uv add castplan-automation
          castplan-mcp init
          ```
          
          **pip (Python):**
          ```bash
          pip install castplan-automation
          castplan-mcp init
          ```
          
          ### âœ¨ Features
          - Universal MCP compatibility (Claude, Cursor, VS Code, etc.)
          - Automatic AI assistant configuration
          - Project-aware documentation and task management
          - Cross-platform support (Windows, macOS, Linux)
          
          ### ðŸ”— Links
          - [GitHub Repository](https://github.com/Ghostseller/CastPlan_mcp)
          - [npm Package](https://www.npmjs.com/package/@castplan/automation-mcp)
          - [PyPI Package](https://pypi.org/project/castplan-automation/)
          
        draft: false
        prerelease: false
        
    - name: Upload npm package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./castplan-automation-mcp-2.0.0.tgz
        asset_name: castplan-automation-mcp-2.0.0.tgz
        asset_content_type: application/gzip
        
    - name: Upload Python wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./python-bridge/dist/castplan_automation-2.0.0-py3-none-any.whl
        asset_name: castplan_automation-2.0.0-py3-none-any.whl
        asset_content_type: application/zip